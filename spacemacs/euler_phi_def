# -*- mode: snippet -*-
# name: euler_phi_def
# key: euler_phi_def
# --
template<typename T>
T extgcd(T a, T b, T &x, T &y){ 
  T d = a;
  if(b != 0){
    d = extgcd(b, a % b, y, x);
    y -= (a / b) * x;
  }else{
    x = 1, y = 0;
  }
  return d;
}

template <typename T>
T modinv(T a, T m){
  long long x = 0, y = 0;
  extgcd<long long>(a, m, x, y);
  x %= m;
  if(x < 0)x += m;
  return x;
}

template <typename T>
map<T, int> factorize(T n){
  map<T, int> res;
  T tmp = n;
  for(T i = 2; i * i <= n; i++){
    while(tmp % i == 0){
      ++res[i];
      tmp /= i;
    }
  }
  if(tmp != 1)res[tmp] = 1;
  return res;
}

long long euler_phi(long long n){
  ll res = n;
  auto mp = factorize(n);
  const int MOD = 1e9 + 7;
  for(auto itr = mp.begin(); itr != mp.end(); ++itr){
    long long p = itr->first;
    res = res * ((p-1) * modinv<long long>(p, MOD) % MOD) % MOD;
  }
  return res;
}
