# -*- mode: snippet -*-
# name: point_query_tree_def
# key: point_query_tree_def
# --
template<typename T, typename E>
struct SegmentTree_ {
  function<T(T, T)> f; // aggregate function
  function<T(T, E)> g; // update function
  int n;
  T def;
  vector<T> vec;
  SegmentTree_(){}
  SegmentTree_(int n_, function<T(T, T)> f, function<T(T, E)> g, T def, vector<T> v=vector<T>()): f(f), g(g), def(def){

    // initialize vector
    n = 1;
    while(n < n_){
      n *= 2;
    }
    vec = vector<T>(2*n -1, def);

    // initialize segment tree
    for(int i = 0; i < v.size(); i++){
      vec[i + n - 1] = v[i];
    }
    for(int i = n - 2; i >= 0; i--){
      vec[i] = f(vec[2*i+1], vec[2*i+2]);
    }
  }
  void update(int k, const E &val){
    k = k + n - 1;
    vec[k] = g(vec[k], val);
    while(k > 0){
      k = (k - 1) / 2;
      vec[k] = f(vec[2*k+1], vec[2*k+2]);
    }
  }
  // [l, r) -> [a, b) (at k)
  T query(int a, int b, int k, int l, int r){
    if(r <= a || b <= l)return def;
    if(a <= l && r <= b)return vec[k];
    T ld = query(a, b, 2*k+1, l, (l+r)/2);
    T rd = query(a, b, 2*k+2, (l+r)/2, r);
    return f(ld, rd);
  }
  T query(int a, int b){
    return query(a, b, 0, 0, n);
  }
};

template<typename T, typename E>
using SegmentTree = struct SegmentTree_<T, E>;
using SegmentTreeI = SegmentTree<int, int>;
using SegmentTreeL = SegmentTree<long long, long long>;

struct EulerTourTree{
  int n = 0;
  vector<vector<int>> edges;
  vector<int> b, e;
  vector<int> v;
  EulerTourTree(){}
  explicit EulerTourTree(int n): n(n){
    edges.resize(n);
    b.resize(n);
    e.resize(n);
    v.reserve(2 * n - 1);
  }
  void adde(int from, int to){
    edges[from].emplace_back(to);
  }
  void dfs(int i){
    v.emplace_back(i);
    b[i] = int(v.size()) - 1;
    for(auto c: edges[i]){
      if(b[c] == -1){
        dfs(c);
        v.emplace_back(i);
      }
    }
    e[i] = int(v.size()) - 1;
  }
  void build(int r = 0){
    b.assign(n, -1);
    e.assign(n, -1);
    v.resize(0);
    dfs(r);
  }
};

struct LCATree{
  int n = 0, m = 0;
  vector<vector<int>> edge;
  vector<vector<int>> par;
  vector<bool> vis;
  vector<int> h;
  LCATree(){}
  LCATree(int n): n(n){
    while((1LL<<m) <= n)m++;
    edge.resize(n);
    par.assign(m + 1, vector<int>(n, 0));
    vis.resize(n, false);
    h.resize(n);
  }
  void adde(int from, int to){
    edge[from].emplace_back(to);
  }
  void dfs(int i){
    vis[i] = true;
    for(auto e: edge[i]){
      if(!vis[e]){
        par[0][e] = i;
        h[e] = h[i] + 1;
        dfs(e);
      }
    }
  }
  void build(){
    fill(vis.begin(), vis.end(), false);
    fill(h.begin(), h.end(), 0);
    par[0][0] = 0;
    h[0] = 0;
    dfs(0);
    for(int i = 1; i <= m; i++){
      for(int j = 0; j < n; j++){
        par[i][j] = par[i-1][par[i-1][j]];
      }
    }
  }
  int go_up(int u, int k){
    int i = 0;
    while(k){
      if(k % 2 == 1){
        u = par[i][u];
      }
      i++;
      k /= 2;
    }
    return u;
  }
  int lca(int u, int v){
    if(h[u] > h[v])u = go_up(u, h[u] - h[v]);
    if(h[u] < h[v])v = go_up(v, h[v] - h[u]);
    if(u == v)return u;
    int ld = 0, rd = n;
    while(rd - ld > 1){
      int k = (rd + ld) / 2;
      int uk = go_up(u, k);
      int vk = go_up(v, k);
      if(uk == vk)rd = k;
      else ld = k;
    }
    return go_up(u, rd);
  }
};

template <typename T, typename E>
struct PointQueryTree{
  int n = 0;
  LCATree lcat;
  EulerTourTree ett;
  SegmentTree<T, E> seg;
  function<E(E)> gm;
  PointQueryTree(){}
  PointQueryTree(int n, function<T(T, T)> f, function<T(T, E)> g, function<E(E)> gm,
                 T def, vector<T> v=vector<T>()): n(n), gm(gm){
    lcat = LCATree(n);
    ett = EulerTourTree(n);
    seg = SegmentTree<T, E>(2 * n, f, g, def, v);
  }
  void adde(int from, int to){
    lcat.adde(from, to);
    ett.adde(from, to);
  }
  void build(){
    lcat.build();
    ett.build();
  }
  void update(int i, E val){
    seg.update(ett.b[i], val);
    seg.update(ett.e[i] + 1, gm(val));
  }
  T query(int u, int v){
    T res = seg.def;
    int l = lcat.lca(u, v);
    res += seg.query(0, ett.b[u] + 1);
    res += seg.query(0, ett.b[v] + 1);
    res -= 2 * seg.query(0, ett.b[l] + 1);
    return res;
  }
};
