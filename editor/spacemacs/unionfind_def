# -*- mode: snippet -*-
# name: unionfind_def
# key: unionfind_def
# --
typedef struct UnionFind_ {
	vector<int> par, rank_, siz;
  UnionFind_(){}
	explicit UnionFind_(int n): rank_(n, 0), siz(n, 1) {
    par.resize(n);
    for(int i = 0; i < n; i++)par[i] = i;
	}
	int find(int x) {
    if(par[x] == x)return x;
    else return par[x] = find(par[x]);
	}
	bool same(int x, int y) {
    if(find(x) == find(y))return true;
    else return false;
	}
	bool unite(int x, int y){
    int xp = find(x);
    int yp = find(y);
    if(xp == yp)return false;
    if(rank_[xp] > rank_[yp]){
      par[yp] = xp;
      siz[xp] += siz[yp];
    }
    else if(rank_[xp] < rank_[yp]){
      par[xp] = yp;
      siz[yp] += siz[xp];
    }
    else {
      par[yp] = xp;
      siz[xp] += siz[yp];
      rank_[xp]++;
    }
    return true;
	}
  int size(int i){
    return siz[find(i)];
  }
} UnionFind;
