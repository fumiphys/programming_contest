<snippet>
<content><![CDATA[
vector<long long> segment_sieve(long long a, long long b){
  vector<bool> is_prime(b - a, true);
  long long B = (long long)(sqrt(b)) + 1;
  vector<bool> is_prime_small(B + 1, true);
  is_prime_small[0] = is_prime_small[1] = false;
  for(int i = 0; i < b - a && i + a <= 1; i++)is_prime[i] = false;
  for(int i = 2; i <= B; i++){
    if(is_prime_small[i]){
      for(long long j = max(2LL, (a + i - 1) / i); (long long)j * (long long)i < b; j++)is_prime[(long long)i * (long long)j - a] = false;
      for(int j = 2; j * i <= B; j++)is_prime_small[i * j] = false;
    }
  }
  vector<long long> res;
  for(int i = 0; i < b - a; i++){
    if(is_prime[i])res.push_back(i + a);
  }
  return res;
}
]]></content>
<tabTrigger>segment_sieve_def</tabTrigger>
<scope>source.c++</scope>
<description>segment_sieve definition</description>
</snippet>