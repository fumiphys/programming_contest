<snippet>
<content><![CDATA[
template <typename T>
struct WeightedUnionFind_{
  int n;
  vector<int> par;
  vector<int> rank;
  vector<T> diff_weight;
  WeightedUnionFind_(int n, T def=0): n(n){
    par.resize(n);
    rank.resize(n);
    diff_weight.resize(n);
    for(int i = 0; i < n; i++){
      par[i] = i;
      rank[i] = 0;
      diff_weight[i] = def;
    }
  }
  int find(int x){
    if(par[x] == x)return x;
    int r = find(par[x]);
    diff_weight[x] += diff_weight[par[x]];
    return par[x] = r;
  }
  T weight(int x){
    find(x);
    return diff_weight[x];
  }
  bool same(int x, int y){
    return find(x) == find(y);
  }
  bool unite(int x, int y, T w){
    w += weight(x), w -= weight(y);
    x = find(x), y = find(y);
    if(x == y)return false;
    if(rank[x] < rank[y])swap(x, y), w = - w;
    if(rank[x] == rank[y])rank[x]++;
    par[y] = x;
    diff_weight[y] = w;
    return true;
  }
  T diff(int x, int y){
    return weight(y) - weight(x);
  }
};
]]></content>
<tabTrigger>weighted_unionfind_def</tabTrigger>
<scope>source.c++</scope>
<description>weighted_unionfind definition</description>
</snippet>