<snippet>
<content><![CDATA[
template <typename T>
struct SparseTable{
  int n;
  function<T(T, T)> f;
  vector<vector<T>> vec;
  vector<int> lookup;
  SparseTable(){}
  SparseTable(const vector<T> &v, function<T(T, T)> f): f(f){
    n = int(v.size());
    int b = 0;
    while((1 << b) <= n)b++;
    vec.resize(b, vector<T>(1 << b));

    for(int i = 0; i < n; i++)vec[0][i] = v[i];
    for(int j = 1; j < b; j++){
      for(int i = 0; i + (1 << j) <= (1 << b); i++){
        vec[j][i] = f(vec[j-1][i], vec[j-1][i+(1<<(j-1))]);
      }
    }

    lookup.resize(n + 1, 0);
    for(int i = 2; i <= n; i++){
      lookup[i] = lookup[i >> 1] + 1;
    }
  }
  // [l, r)
  T query(int l, int r){
    int b = lookup[r - l];
    return f(vec[b][l], vec[b][r - (1 << b)]);
  }
};
]]></content>
<tabTrigger>sparse_table_def</tabTrigger>
<scope>source.c++</scope>
<description>sparse_table definition</description>
</snippet>